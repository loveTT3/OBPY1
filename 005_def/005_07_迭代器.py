# 可迭代对象
'''
内部含有 __iter__方法的对象 叫可迭代对象
'''
# str  list   tuple  dic  set  range 文件句柄等都是可迭代对象


s = 132
list1 = [1,2,3,4]
# print(dir(s))
# print('__iter__' in dir(s))
# print('__iter__' in dir(list1))

'''
    从字面意思来说：可迭代对象就是一个可以重复取值的实实在在的东西。
    从专业角度来说：但凡内部含有__iter__方法的对象，都是可迭代对象。
    可迭代对象可以通过判断该对象是否有’__iter__’方法来判断。
    可迭代对象的优点：
        可以直观的查看里面的数据。
    可迭代对象的缺点：
        1. 占用内存。
        2. 可迭代对象不能迭代取值（除去索引，key以外）。
    那么这个缺点有人就提出质疑了，即使抛去索引,key以外，这些我可以通过for循环进行取值呀！
    他们 其实for循环在底层做了转化，就是先将可迭代对象转化成迭代器，然后在进行取值的
'''


# 迭代器
'''
    从字面意思来说迭代器，是一个可以迭代取值的工具，器：在这里当做工具比较合适。
    从专业角度来说：迭代器是这样的对象：实现了无参数的__next__方法，返回序列中的下一个元素，
                   如果没有元素了，那么抛出StopIteration异常.
                   python中的迭代器还实现了__iter__方法，因此迭代器也可以迭代
    我们简单来说：在python中，内部含有'__Iter__'方法并且含有'__next__'方法的对象就是迭代器。
'''
o1 = 'aaaa'
o2 = [1,2,3]
o3 = (1,2,3)
o4 = {'name':'Bob','age':19}
o5 = {1,2,3}
f1 = open('a',encoding='utf-8',mode='r')
# print('字符串：','__iter__' in dir(o1) and '__next__' in dir(o1))
# print('列表：','__iter__' in dir(o1) and '__next__' in dir(o2))
# print('元组：','__iter__' in dir(o1) and '__next__' in dir(o3))
# print('字典：','__iter__' in dir(o1) and '__next__' in dir(o4))
# print('集合：','__iter__' in dir(o1) and '__next__' in dir(o5))
# print('文件句柄：','__iter__' in dir(o1) and '__next__' in dir(f1))

# 可迭代对象可以转化为迭代器
s1 = 'lkj'
obj = iter(s1) # s1.__iter__()
# print(next(obj))  # obj.__next__()
# print(next(obj))
# print(next(obj))

'''
  从字面意思来说：迭代器就是可以迭代取值的工具。
        从专业角度来说：在python中，内部含有'__Iter__'方法并且含有'__next__'方法的对象就是迭代器。
        迭代器的优点：
            节省内存。
                迭代器在内存中相当于只占一个数据的空间：因为每次取值都上一条数据会在内存释放，加载当前的此条数据。
            惰性机制。
                next一次，取一个值，绝不过多取值。​
        有一个迭代器模式可以很好的解释上面这两条：
            迭代是数据处理的基石。扫描内存中放不下的数据集时，我们要找到一种惰性获取数据项的方式，即按需一次获取一个数据项。这就是迭代器模式。
        迭代器的缺点：
            不能直观的查看里面的数据。
            取值时不走回头路，只能一直向下取值。
'''

ll = [1,2,3,4,5]
o = iter(ll)
while 1:
    try:
        print(next(o))
    except StopIteration:
        break


# 迭代器 
l1 = [1,2,3,4,5,6,7,8,9,0]
obj1 = iter(l1)
for i in obj1:
    print(i)
# for i in range(4):
    # print(next(obj1))
# for i in range(4):
    # print(next(obj1))


# 迭代器与可迭代对象 对比
'''
可迭代对象：
    是一个私有的方法比较多，操作灵活（比如列表，字典的增删改查，字符串的常用操作方法等）,比较直观，
    但是占用内存，而且不能直接通过循环迭代取值的这么一个数据集。
应用：
    当你侧重于对于数据可以灵活处理，并且内存空间足够，将数据集设置为可迭代对象是明确的选择。
迭代器：
    是一个非常节省内存，可以记录取值位置，可以直接通过循环+next方法取值，
    但是不直观，操作方法比较单一的数据集。
应用：
    当你的数据量过大，大到足以撑爆你的内存或者你以节省内存为首选因素时，将数据集设置为迭代器是一个不错的选择。（可参考为什么python把文件句柄设置成迭代器）。
'''



