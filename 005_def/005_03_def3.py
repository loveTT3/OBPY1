
# 名称空间
'''
全局命名空间--> 我们直接在py文件中, 函数外声明的变量都属于全局命名空间
​ 局部命名空间--> 在函数中声明的变量会放在局部命名空间
​ 内置命名空间--> 存放python解释器为我们提供的名字, list, tuple, str, int这些都是内置命名空间
'''


#加载顺序
'''
内置命名空间(程序运行伊始加载)
->全局命名空间(程序运行中：从上到下加载)
->局部命名空间(程序运行中：调用时才加载。
'''


#取值顺序
'''
空间的取值顺序与加载顺序是相反的，
取值顺序满足的就近原则，从小范围到大范围一层一层的逐步引用。
'''


# 作用域
'''
作用域就是作用范围, 按照生效范围来看分为全局作用域和局部作用域
全局作用域:包含内置命名空间和全局命名空间. 在整个文件的任何位置都可以使用(从上到下逐步执行).
局部作用域:在函数内部可以使用.
作用域命名空间:
​ 1. 全局作用域:全局命名空间+内置命名空间
​ 2. 局部作用域:局部命名空间
'''


def a():
    c = 1
    def b():
        # c += 1  #局部作用域不能改变全局作用域
        print(c)
    b()
# a()


# global
'''
 1.在局部声明一个全局变量
 2.在局部作用域想要对全局作用域的全局变量进行修改时，需要用到 global(限于字符串，数字)。
'''
# count = 1
# def ff():
#     global count
#     count += 1
#     print(count)
# # ff()

def ff():
    global count1
    count1 = 1
    count1 += 1
    print(count1)
ff()
# print(count1)

'''
1，不能更改全局变量。
2，在局部作用域中，对父级作用域（或者更外层作用域非全局作用域）的变量进行引用和修改，
并且引用的哪层，从那层及以下此变量全部发生改变。
'''

def add_b():
    b = 42
    def do_global():
        b = 10
        print(b)
        def dd_nonlocal():
            nonlocal b
            b = b + 20
            print(b)
        dd_nonlocal()
        print(b)
    do_global()
    print(b)
# add_b()




print(locals())
print(globals())




